// Auto-generated from x_appointment.html.
// DO NOT EDIT.

library appointment;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import '_from_packages/widget/components/accordion.dart';
import '_from_packages/widget/components/collapse.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:widget/effects.dart';
import 'package:widget/widget.dart';
import 'kalender_connection.dart';



class XAppointment extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-appointment");
  static final __html1 = new autogenerated.OptionElement(), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div is="x-accordion" class="day-column">
          <div is="x-collapse">
            <div class="accordion-heading">
              <a class="accordion-toggle" data-toggle="collapse"></a> <input type="text">
              <img class="clickable">
            </div>
            <input type="tel" placeholder="Nummer">
            <select></select>
          </div>
        </div>
      ''');
  autogenerated.AnchorElement __e2;
  autogenerated.DivElement __e10, __e9;
  autogenerated.ImageElement __e4;
  autogenerated.InputElement __e3, __e5;
  autogenerated.SelectElement __e8;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-appointment");
    setScopedCss("x-appointment", new autogenerated.ScopedCssMapper({"x-appointment":"[is=\"x-appointment\"]"}));
    _css = getScopedCss("x-appointment");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e10 = __root.nodes[1];
    __e9 = __e10.nodes[1];
    __e2 = __e9.nodes[1].nodes[1];
    var __binding1 = __t.contentBind(() =>  heading , false);
    __e2.nodes.addAll([new autogenerated.Text('\n                '),
        __binding1,
        new autogenerated.Text('\n              ')]);
    __e3 = __e9.nodes[1].nodes[3];
    __t.listen(__e3.onChange, ($event) { valueChanged(); });
    __t.listen(__e3.onInput, ($event) { name = __e3.value; });
    __t.oneWayBind(() => name, (e) { if (__e3.value != e) __e3.value = e; }, false, false);
    __e4 = __e9.nodes[1].nodes[5];
    __t.listen(__e4.onClick, ($event) { toggleImage(); });
    __t.oneWayBind(() =>  typeImages[type] , (e) { if (__e4.src != e) __e4.src = e; }, false, true);
    __e5 = __e9.nodes[3];
    __t.listen(__e5.onChange, ($event) { valueChanged(); });
    __t.listen(__e5.onInput, ($event) { number = __e5.value; });
    __t.oneWayBind(() => number, (e) { if (__e5.value != e) __e5.value = e; }, false, false);
    __e8 = __e9.nodes[5];
    __t.listen(__e8.onChange, ($event) { type = __e8.selectedIndex; });
    __t.listen(__e8.onChange, ($event) { valueChanged(); });
    __t.oneWayBind(() => type, (e) { if (__e8.selectedIndex != e) __e8.selectedIndex = e; }, false, false);
    __t.loopIterateAttr(__e8, () => types, ($list, $index, __t) {
      var t = $list[$index];
      var __e7;
      __e7 = __html1.clone(true);
      var __binding6 = __t.contentBind(() =>  t , false);
      __e7.nodes.add(__binding6);
    __t.addAll([new autogenerated.Text('\n              '),
        __e7,
        new autogenerated.Text('\n            ')]);
    });
    __t.component(new Collapse()..host = __e9);
    __t.component(new Accordion()..host = __e10);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e10 = __e9 = __e2 = __e3 = __e4 = __e5 = __e8 = null;
  }

  /** Original code from the component. */

  static List<XAppointment> dirtyAppointments = new List<XAppointment>();
  static KalenderConnection connection;
  String id;
  
  final List<String> types = ["Frei", "Werkstatt", "Nicht im Haus", "Einlagen", "Einlagen Folge"];
  final List<String> typeImages = ["img/frei.png", "img/werkstatt.png", "img/nicht_im_haus.png", "img/einlagen.png", "img/einlagen_folge.png"];

  DateTime time;
  String get heading => timeForHeading(time);
  String get headingWithDate => timeAndDateForHeading(time);

  Map __$_data;
  Map get _data {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, '_data');
    }
    return __$_data;
  }
  set _data(Map value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, '_data',
          __$_data, value);
    }
    __$_data = value;
  }
  String get name => _data['name'];
  set name(value) => _data['name'] = value;
  String get number => _data['number'];
  set number(value) => _data['number'] = value;
  int get type => _data['type'];
  set type(value) => _data['type'] = value;
  
  XAppointment(DateTime time, String id) {
    host = new Element.html('<x-appointment id="$id"></x-appointment>');
    this.time = time;
    this._data = toObservable({
      'name': null,
      'number': null,
      'type': 0
    });
    //print("XAppointment created: ${time.toString()}, ID: $id");
  }

  clear() {
    _data = toObservable({
      'name': null,
      'number': null,
      'type': 0
    });
    //print("XAppointment cleared: " + time.toString());
  }
  
  String timeForHeading(DateTime t) {
    String hour = t.hour.toString();
    String minute = t.minute.toString();
    hour = hour.length > 1 ? hour : "0" + hour;
    minute = minute.length > 1 ? minute : "0" + minute;
    
    return hour + ":" + minute;
  }

  timeAndDateForHeading(DateTime t) {
    String day = t.day.toString();
    String month = t.month.toString();
    String year = t.year.toString();
    
    return "${day}.${month}.${year}, ${timeForHeading(t)}";
  }
  
  valueChanged() {
    print("in valueChanged of XAppointment");
    dirtyAppointments.add(this);
    print("after adding, dirtyAppointments length is ${dirtyAppointments.length}");
    connection.send(time, _data);
    statusArea.displaySaveMessage(headingWithDate, _data);
  }
  
  toggleImage() {
    type++;
    if (type >= types.length) type = 0;
    valueChanged();
  }
}
//# sourceMappingURL=x_appointment.dart.map