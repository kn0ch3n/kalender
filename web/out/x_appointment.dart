// Auto-generated from x_appointment.html.
// DO NOT EDIT.

library appointment;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import '_from_packages/widget/components/accordion.dart';
import '_from_packages/widget/components/collapse.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:widget/effects.dart';
import 'package:widget/widget.dart';



class XAppointment extends WebComponent {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-appointment");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div is="x-accordion" class="day-column">
          <div is="x-collapse">
            <div class="accordion-heading">
              <a class="accordion-toggle" data-toggle="collapse" style="display:inline-block;"></a> <input type="text" style="display:inline-block;">
            </div>
            <input type="tel" placeholder="Nummer">
            <select>
              <option>Frei</option>
              <option>Werkstatt</option>
              <option>Nicht im Haus</option>
              <option>Einlagen</option>
              <option>Einlagen Folge</option>
            </select>
          </div>
        </div>
      ''');
  autogenerated.AnchorElement __e1;
  autogenerated.DivElement __e4, __e5;
  autogenerated.InputElement __e2, __e3;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-appointment");
    setScopedCss("x-appointment", new autogenerated.ScopedCssMapper({"x-appointment":"[is=\"x-appointment\"]"}));
    _css = getScopedCss("x-appointment");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e5 = __root.nodes[1];
    __e4 = __e5.nodes[1];
    __e1 = __e4.nodes[1].nodes[1];
    var __binding0 = __t.contentBind(() => heading, false);
    __e1.nodes.addAll([new autogenerated.Text('\n                '),
        __binding0,
        new autogenerated.Text('\n              ')]);
    __e2 = __e4.nodes[1].nodes[3];
    __t.listen(__e2.onChange, ($event) { printChanged(); });
    __t.listen(__e2.onInput, ($event) { name = __e2.value; });
    __t.oneWayBind(() => name, (e) { if (__e2.value != e) __e2.value = e; }, false, false);
    __e3 = __e4.nodes[3];
    __t.listen(__e3.onInput, ($event) { number = __e3.value; });
    __t.oneWayBind(() => number, (e) { if (__e3.value != e) __e3.value = e; }, false, false);
    __t.component(new Collapse()..host = __e4);
    __t.component(new Accordion()..host = __e5);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e5 = __e4 = __e1 = __e2 = __e3 = null;
  }

  /** Original code from the component. */

  
  static Map<DateTime, XAppointment> _cache;
  
  DateTime _time;
  String get heading => timeForHeading(_time);
  String name;
  String number;

  factory XAppointment(DateTime time) {
    if (_cache == null) {
      _cache = new Map();
    }

    if (_cache.containsKey(time)) {
      return _cache[time];
    } else {
      final appointment = new XAppointment._internal(time);
      _cache[time] = appointment;
      return appointment;
    }
  }

  XAppointment._internal(DateTime time) {
    host = (new Element.html('<x-appointment time="$time"></x-appointment>'));
    this._time = time;
  }
  
  String timeForHeading(DateTime t) {
    String hour = t.hour.toString();
    String minute = t.minute.toString();
    hour = hour.length > 1 ? hour : "0" + hour;
    minute = minute.length > 1 ? minute : "0" + minute;
    
    return hour + ":" + minute;
  }
  
  printChanged() {
    print("Name changed to: " + name);
  }
}
//# sourceMappingURL=x_appointment.dart.map