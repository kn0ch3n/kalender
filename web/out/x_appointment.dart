// Auto-generated from x_appointment.html.
// DO NOT EDIT.

library appointment;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import '_from_packages/widget/components/accordion.dart';
import '_from_packages/widget/components/collapse.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:widget/effects.dart';
import 'package:widget/widget.dart';
import 'kalender_connection.dart';
import 'kalender.dart' as kalender;



class XAppointment extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-appointment");
  static final __html1 = new autogenerated.OptionElement(), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div is="x-accordion" class="day-column">
          <div is="x-collapse">
            <div class="accordion-heading" style="background-color: {{ color }}">
              <a class="accordion-toggle" data-toggle="collapse"></a> <input type="text" data-toggle="collapse">
              <img class="clickable">
            </div>
            <img src="img/v.png" class="clickable" style="margin-left: -40px">
            <input type="tel" placeholder="Nummer"> <br>
            <img src="img/x.png" class="clickable" style="margin-left: -40px">
            <select></select>
          </div>
        </div>
      ''');
  autogenerated.AnchorElement __e3;
  autogenerated.DivElement __e13, __e14, __e6;
  autogenerated.ImageElement __e5, __e7, __e9;
  autogenerated.InputElement __e4, __e8;
  autogenerated.SelectElement __e12;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-appointment");
    setScopedCss("x-appointment", new autogenerated.ScopedCssMapper({"x-appointment":"[is=\"x-appointment\"]"}));
    _css = getScopedCss("x-appointment");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e14 = __root.nodes[1];
    __e13 = __e14.nodes[1];
    __e6 = __e13.nodes[1];
    __e3 = __e6.nodes[1];
    var __binding2 = __t.contentBind(() =>  heading , false);
    __e3.nodes.addAll([new autogenerated.Text('\n                '),
        __binding2,
        new autogenerated.Text('\n              ')]);
    __t.listen(__e3.onClick, ($event) { updateHeight(); });
    __e4 = __e6.nodes[3];
    __t.listen(__e4.onChange, ($event) { valueChanged(); });
    __t.listen(__e4.onInput, ($event) { name = __e4.value; });
    __t.oneWayBind(() => name, (e) { if (__e4.value != e) __e4.value = e; }, false, false);
    __e5 = __e6.nodes[5];
    __t.listen(__e5.onClick, ($event) { toggleImage(); });
    __t.oneWayBind(() =>  typeImages[type] , (e) { if (__e5.src != e) __e5.src = e; }, false, true);
    __t.oneWayBind(() =>  types[type] , (e) { if (__e5.title != e) __e5.title = e; }, false, false);
    __t.bind(() =>  color ,  (__e) { __e6.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
    __e7 = __e13.nodes[3];
    __t.listen(__e7.onClick, ($event) { extend(); });
    __e8 = __e13.nodes[5];
    __t.listen(__e8.onChange, ($event) { valueChanged(); });
    __t.listen(__e8.onInput, ($event) { number = __e8.value; });
    __t.oneWayBind(() => number, (e) { if (__e8.value != e) __e8.value = e; }, false, false);
    __e9 = __e13.nodes[9];
    __t.listen(__e9.onClick, ($event) { clear(save: true); });
    __e12 = __e13.nodes[11];
    __t.listen(__e12.onChange, ($event) { type = __e12.selectedIndex; });
    __t.listen(__e12.onChange, ($event) { valueChanged(); });
    __t.oneWayBind(() => type, (e) { if (__e12.selectedIndex != e) __e12.selectedIndex = e; }, false, false);
    __t.loopIterateAttr(__e12, () => types, ($list, $index, __t) {
      var t = $list[$index];
      var __e11;
      __e11 = __html1.clone(true);
      var __binding10 = __t.contentBind(() =>  t , false);
      __e11.nodes.add(__binding10);
    __t.addAll([new autogenerated.Text('\n              '),
        __e11,
        new autogenerated.Text('\n            ')]);
    });
    __t.component(new Collapse()..host = __e13);
    __t.component(new Accordion()..host = __e14);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e14 = __e13 = __e6 = __e3 = __e4 = __e5 = __e7 = __e8 = __e9 = __e12 = null;
  }

  /** Original code from the component. */

  static List<XAppointment> dirtyAppointments = new List<XAppointment>();
  static KalenderConnection connection;
  String id;
  final List<String> types = ["Frei", "Werkstatt", "Freihalten", "Außer Haus", "Einlagen Erstversorgung", "Einlagen Folgeversorgung", 
                              "Podologische Sohlen Erstversorgung", "Podologische Sohlen Kontrolle", "Podologische Sohlen Folgeversorgung", 
                              "Schuhe Erstversorgung", "Schuhe Folgeversorgung", "Schuhe Probe",
                              "Verkürzungsausgleich Erstversorgung", "Verkürzungsausgleich Folgeversorgung"];
  final List<String> typeImages = ["img/frei.png", "img/werkstatt.png", "img/freihalten.png", "img/nicht_im_haus.png", "img/ee.png", "img/ef.png",
                                   "img/pe.png", "img/pk.png", "img/pf.png",
                                   "img/se.png", "img/sf.png", "img/sp.png", 
                                   "img/ve.png", "img/vf.png"];
  DateTime time;
  String get heading => timeForHeading(time);
  String get headingWithDate => timeAndDateForHeading(time);

  Map __$_data;
  Map get _data {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, '_data');
    }
    return __$_data;
  }
  set _data(Map value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, '_data',
          __$_data, value);
    }
    __$_data = value;
  }
  String get name => _data['name'];
  set name(value) => _data['name'] = value;
  String get number => _data['number'];
  set number(value) => _data['number'] = value;
  int get type => _data['type'];
  set type(value) => _data['type'] = value;
  String get color => _data['color'];
  set color(value) => _data['color'] = value;
  
  XAppointment(DateTime time, String id) {
    host = new Element.html('<x-appointment id="$id"></x-appointment>');
    this.time = time;
    this.id = id;
    _data = toObservable({
      'name': null,
      'number': null,
      'type': 0,
      'color': "#FFFFFF"
    });
  }

  clear({bool save: false}) {
    _data = toObservable({
      'name': null,
      'number': null,
      'type': 0,
      'color': "#FFFFFF"
    });
    if (save) valueChanged();
  }
  
  String timeForHeading(DateTime t) {
    String hour = t.hour.toString();
    String minute = t.minute.toString();
    hour = hour.length > 1 ? hour : "0" + hour;
    minute = minute.length > 1 ? minute : "0" + minute;
    
    return hour + ":" + minute;
  }

  timeAndDateForHeading(DateTime t) {
    String day = t.day.toString();
    String month = t.month.toString();
    String year = t.year.toString();
    
    return "${day}.${month}.${year}, ${timeForHeading(t)}";
  }
  
  valueChanged() {
    if (type == 1) color = "#FF8844";
    else if (type == 2) color = "#FEDC76";
    else if (type == 3) color = "#FEFE99";
    else if (type != null) color = "#FFFFFF";
    if (!isEmpty()) dirtyAppointments.add(this);
    connection.send('appointment', time, _data);
    kalender.updateNextFreeSpots();
    statusArea.displaySaveMessage(headingWithDate, _data);
  }
  
  toggleImage() {
    type++;
    if (type >= types.length) type = 0;
    valueChanged();
  }

  extend() {
    kalender.extend(this);
  }
  
  updateHeight() {
    kalender.updateHeight();
  }
  
  bool isEmpty() => (this.name == null || this.name == "") && (this.number == null || this.number == "") && this.type == 0;
  
  void setDirty() => dirtyAppointments.add(this);
  
  String toString() => timeAndDateForHeading(this.time);
}
//# sourceMappingURL=x_appointment.dart.map