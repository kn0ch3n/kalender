// Auto-generated from x_pause.html.
// DO NOT EDIT.

library pause;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import '_from_packages/widget/components/accordion.dart';
import '_from_packages/widget/components/collapse.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:widget/effects.dart';
import 'package:widget/widget.dart';
import 'kalender_connection.dart';



class XPause extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-pause");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div is="x-accordion" class="day-column">
          <div is="x-collapse">
            <div class="accordion-heading">
              <a class="accordion-toggle" data-toggle="collapse"></a> <input type="text" placeholder="Mittagspause">
            </div>
            <textarea rows="3"></textarea>
          </div>
        </div>
      ''');
  autogenerated.AnchorElement __e12;
  autogenerated.DivElement __e15, __e16;
  autogenerated.InputElement __e13;
  autogenerated.Template __t;
  autogenerated.TextAreaElement __e14;

  void created_autogenerated() {
    var __root = createShadowRoot("x-pause");
    setScopedCss("x-pause", new autogenerated.ScopedCssMapper({"x-pause":"[is=\"x-pause\"]"}));
    _css = getScopedCss("x-pause");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e16 = __root.nodes[1];
    __e15 = __e16.nodes[1];
    __e12 = __e15.nodes[1].nodes[1];
    var __binding11 = __t.contentBind(() => heading, false);
    __e12.nodes.addAll([new autogenerated.Text('\n                '),
        __binding11,
        new autogenerated.Text('\n              ')]);
    __e13 = __e15.nodes[1].nodes[3];
    __t.listen(__e13.onChange, ($event) { valueChanged(); });
    __t.listen(__e13.onInput, ($event) { name = __e13.value; });
    __t.oneWayBind(() => name, (e) { if (__e13.value != e) __e13.value = e; }, false, false);
    __e14 = __e15.nodes[3];
    __t.listen(__e14.onChange, ($event) { valueChanged(); });
    __t.listen(__e14.onInput, ($event) { text = __e14.value; });
    __t.oneWayBind(() => text, (e) { if (__e14.value != e) __e14.value = e; }, false, false);
    __t.component(new Collapse()..host = __e15);
    __t.component(new Accordion()..host = __e16);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e16 = __e15 = __e12 = __e13 = __e14 = null;
  }

  /** Original code from the component. */

  static List<XPause> dirtyPauses = new List<XPause>();
  static KalenderConnection connection;
  
  DateTime time;
  String get heading => timeForHeading(time);

  Map __$_data;
  Map get _data {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, '_data');
    }
    return __$_data;
  }
  set _data(Map value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, '_data',
          __$_data, value);
    }
    __$_data = value;
  }
  String get name => _data['name'];
  set name(value) => _data['name'] = value;
  String get text => _data['text'];
  set text(value) => _data['text'] = value;
  
  XPause(DateTime time) {
    host = (new Element.html('<x-pause></x-pause>'));
    this.time = time;
    _data = toObservable({
      'name': null,
      'text': null
    });
  }
  
  String timeForHeading(DateTime t) {
    String hour = t.hour.toString();
    String minute = t.minute.toString();
    hour = hour.length > 1 ? hour : "0" + hour;
    minute = minute.length > 1 ? minute : "0" + minute;
    
    return hour + ":" + minute;
  }

  valueChanged() {
    dirtyPauses.add(this);
    connection.send(time, _data);
  }
}
//# sourceMappingURL=x_pause.dart.map